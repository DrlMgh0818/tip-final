'use strict';
window.addEventListener('load', function () {
  const k = 15;
  let s,
    r,
    h,
    n,
    v,
    f,
    p,
    o = [],
    c = {},
    a;
  const i = Math.random,
    y = Math.floor,
    x = Math.round;
  Math.ceil, Math.abs, Math.min;
  const l = Math.max,
    b = Math.PI;
  Math.PI;
  const w = 2 * Math.PI;
  Math.sin, Math.cos;
  const g = Math.atan2;
  Math.tan;
  const M = Math.hypot,
    m = (0, Math.sqrt)(3),
    E = m / 2;
  Math.PI;
  function u(t, e) {
    return void 0 === e && ((e = t), (t = 0)), y(t + (e - t) * i());
  }
  function d(t) {
    return T(Array.from(new Array(t).keys()));
  }
  function T(e) {
    var i, s;
    for (let t = e.length - 1; 1 <= t; --t) (i = u(0, t + 1)), (s = e[t]), (e[t] = e[i]), (e[i] = s);
    return e;
  }
  let z;
  {
    let t, u, d;
    ((z = function (t, e) {
      (this.kx = t), (this.ky = e), (this.neighbours = []);
    }).dimensions = function () {
      (u = (h - k * (1.5 * v + 0.5)) / 2 + k),
        (d = (n - k * m * (f + 0.5)) / 2 + k * m),
        ((t = [[], [], [], [], [], []])[3][0] = -(k + 0.5)),
        (t[2][0] = t[4][0] = -(k + 0.5) / 2),
        (t[1][0] = t[5][0] = +(k + 0.5) / 2),
        (t[0][0] = k + 0.5),
        (t[4][1] = t[5][1] = -(k + 0.5) * E),
        (t[0][1] = t[3][1] = 0),
        (t[1][1] = t[2][1] = (k + 0.5) * E);
    }),
      (z.prototype.size = function () {
        (this.xc = u + 1.5 * this.kx * k),
          (this.yc = d + this.ky * k * m),
          1 & this.kx && (this.yc -= k * E),
          (this.vertices = [[], [], [], [], [], []]),
          (this.vertices[3][0] = this.xc + t[3][0]),
          (this.vertices[2][0] = this.vertices[4][0] = this.xc + t[2][0]),
          (this.vertices[1][0] = this.vertices[5][0] = this.xc + t[1][0]),
          (this.vertices[0][0] = this.xc + t[0][0]),
          (this.vertices[4][1] = this.vertices[5][1] = this.yc + t[4][1]),
          (this.vertices[0][1] = this.vertices[3][1] = this.yc + t[0][1]),
          (this.vertices[1][1] = this.vertices[2][1] = this.yc + t[1][1]);
      }),
      (z.prototype.drawHexagon = function (t) {
        this.vertices || this.size();
        var e = r;
        e.beginPath(),
          e.moveTo(this.vertices[0][0], this.vertices[0][1]),
          e.lineTo(this.vertices[1][0], this.vertices[1][1]),
          e.lineTo(this.vertices[2][0], this.vertices[2][1]),
          e.lineTo(this.vertices[3][0], this.vertices[3][1]),
          e.lineTo(this.vertices[4][0], this.vertices[4][1]),
          e.lineTo(this.vertices[5][0], this.vertices[5][1]),
          e.lineTo(this.vertices[0][0], this.vertices[0][1]),
          (e.strokeStyle = '#fce205'),
          (e.lineWidth = 0.5),
          (e.fillStyle = `hsl(${t},100%,60%)`),
          e.fill();
      }),
      (z.prototype.drawSide = function (t) {
        var e = (t + 1) % 6,
          i = (this.vertices || this.size(), r);
        i.beginPath(),
          i.moveTo(this.vertices[t][0], this.vertices[t][1]),
          i.lineTo(this.vertices[e][0], this.vertices[e][1]),
          (i.strokeStyle = '#fce205'),
          (i.lineWidth = 0.5),
          i.stroke();
      }),
      (z.prototype.neighbour = function (t) {
        let e = this.neighbours[t];
        if (!(e instanceof z)) {
          if (!1 === e) return !1;
          if (
            (e =
              1 & this.kx
                ? { kx: this.kx + [1, 0, -1, -1, 0, 1][t], ky: this.ky + [0, 1, 0, -1, -1, -1][t] }
                : { kx: this.kx + [1, 0, -1, -1, 0, 1][t], ky: this.ky + [1, 1, 1, 0, -1, 0][t] }).kx < 0 ||
            e.ky < 0 ||
            e.kx >= v ||
            e.ky >= f
          )
            return (this.neighbours[t] = !1);
          (e = p[e.ky][e.kx]), ((this.neighbours[t] = e).neighbours[(t + 3) % 6] = this);
        }
        return e;
      }),
      (z.whichHexagon = function (t, e) {
        let i, s, r, h, n;
        (h = x((t - u) / 1.5 / k)), (n = x((e - d) / k / m + 0.5 * (1 & h)));
        var o = u + 1.5 * h * k;
        let c = d + n * k * m,
          a = (1 & h && (c -= k * E), g(e - c, t - o));
        switch ((a < 0 && (a += w), (a = y((3 * a) / b) % 6))) {
          case 0:
            (i = 1.5 * k), (s = E * k);
            break;
          case 1:
            (i = 0), (s = m * k);
            break;
          case 2:
            (i = -1.5 * k), (s = E * k);
            break;
          case 3:
            (i = -1.5 * k), (s = -E * k);
            break;
          case 4:
            (i = 0), (s = -m * k);
            break;
          case 5:
            (i = 1.5 * k), (s = -E * k);
        }
        var l = M(t - o, e - c);
        return (
          M(t - i - o, e - s - c) < l &&
            ((r =
              1 & h
                ? { kx: h + [1, 0, -1, -1, 0, 1][a], ky: n + [0, 1, 0, -1, -1, -1][a] }
                : { kx: h + [1, 0, -1, -1, 0, 1][a], ky: n + [1, 1, 1, 0, -1, 0][a] }),
            ({ kx: h, ky: n } = r)),
          !(h < 0 || n < 0 || h >= v || n >= f) && p[n][h]
        );
      });
  }
  function A(t, e) {
    (this.cell = t), (this.hue = e), this.mark();
  }
  function F() {
    (h = window.innerWidth), (n = window.innerHeight);
    var i,
      t = l((window.innerWidth - h) / 2, 0),
      e = l((window.innerHeight - n) / 2, 0);
    if (
      ((s.style.left = t + 'px'),
      (s.style.top = e + 'px'),
      (s.width = h),
      (s.height = n),
      (r.lineCap = 'round'),
      (v = y((h / k - 0.5) / 1.5)),
      (f = y(n / k / m - 0.5)),
      (v += 3),
      (f += 3),
      !(v <= 3 || f <= 3))
    ) {
      z.dimensions(), (p = []);
      for (let e = 0; e < f; ++e) {
        p[e] = [];
        for (let t = 0; t < v; ++t) (i = new z(t, e)), (p[e][t] = i);
      }
      {
        let i,
          s,
          r,
          h,
          t = 0,
          n = [],
          o = [];
        for (
          p.forEach((t) => {
            t.forEach((t) => {
              (t.blocked = [!0, !0, !0, !0, !0, !0]), (t.inMaze = !1), (t.tryOrder = d(6)), n.push(t);
            });
          }),
            T(n),
            (i = n.pop()).depth = 0,
            c(i);
          o.length;

        ) {
          (h = void 0), T(o);
          t: for (let e = o.length - 1; 0 <= e; --e) {
            i = o[e];
            for (let t = 0; t < 6; ++t)
              if (((s = i.tryOrder[t]), (r = i.neighbour(s)) && r.inMaze)) {
                h = e;
                break t;
              }
          }
          if (void 0 === h) throw 'Bug in createMaze : found no possibility';
          (i.blocked[s] = !1),
            (r.blocked[(s + 3) % 6] = !1),
            (i.depth = r.depth + 1),
            i.depth > t && (t = i.depth),
            o.splice(h, 1),
            c(i);
        }
        function c(e) {
          var i, s;
          e.inMaze = !0;
          for (let t = 0; t < 6; ++t)
            !1 !== (i = e.neighbour(t)) && -1 != (s = n.indexOf(i)) && (n.splice(s, 1), o.push(i));
        }
      }
      return (
        p.forEach((t) => {
          t.forEach((i) => {
            i.blocked.forEach((t, e) => {
              t && i.drawSide(e);
            });
          });
        }),
        1
      );
    }
  }
  (A.prototype.mark = function () {
    (this.cell.explored = !0), this.cell.drawHexagon(this.hue);
  }),
    (A.prototype.explore = function () {
      let e, i;
      var s = d(6),
        r = this.cell;
      for (let t = 0; t < 6; ++t)
        (i = s[t]),
          r.blocked[i] ||
            r.neighbour(i).explored ||
            (e ? a.push(new A(r.neighbour(i), this.hue + (u(5, 10) % 360))) : (e = r.neighbour(i)));
      return !!e && ((this.cell = e), this.mark(), !0);
    });
  let H;
  {
    let r = 0;
    H = function (t) {
      var e,
        i,
        s = o.shift();
      switch ((window.requestAnimationFrame(H), r)) {
        case 0:
          F() && ++r;
          break;
        case 1:
          (e = c.x),
            (i = c.y),
            void 0 === e && ((e = h / 2), (i = n / 2)),
            (e = z.whichHexagon(e, i)) instanceof z &&
              (p.forEach((t) => {
                t.forEach((t) => {
                  t.explored = !1;
                });
              }),
              (a = [new A(e, u(360))])) &&
              ++r;
          break;
        case 2:
          0 == a.length
            ? ++r
            : a.forEach((t, e) => {
                t.explore() || a.splice(e, 1);
              });
          break;
        case 3:
          'click' === s && (r = 0);
      }
    };
  }
  ((s = document.createElement('canvas')).style.position = 'absolute'),
    document.body.appendChild(s),
    (r = s.getContext('2d')),
    s.setAttribute('title', 'click me'),
    window.addEventListener('click', function (t) {
      'CANVAS' == t.target.tagName && (o.push('click'), (c.x = t.clientX), (c.y = t.clientY));
    }),
    o.push('click'),
    window.requestAnimationFrame(H);
});
